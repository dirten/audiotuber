#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use File::Which;
use File::Basename;
use MP3::Info;
use App::AudioTuber qw(/./);

# Read in our command line options
my %params = ();
GetOptions ( \%params,
	"mp3|m=s",      # MP3 file
	"image|i=s",    # image file
	"title|t=s",    # track title
	"artist|a=s",   # artist
	"composer|c=s", # composer
	"ffmpeg|f=s",   # path to ffmpeg
) or die("Error in command line arguments\n");

my $ffmpeg = $params{ffmpeg} // which('ffmpeg');
if (!defined($ffmpeg) || !-x $ffmpeg) {
	die "Could not find ffmpeg executable\n";
}

if (!$params{mp3}) {
	die "Must provide an MP3 file with -m\n";
}

if (!-e $params{mp3}) {
	die "MP3 file $params{mp3} does not exist\n";
}

if ($params{mp3} !~ m/\.mp3$/i) {
	die "MP3 file $params{mp3} is not a valid MP3 file\n";
}

if ($params{image} && !-e $params{image}) {
        die "Image file $params{image} does not exist\n";
}

# Get filename without extension
my $basename = fileparse($params{mp3}, qr/\.[^.]*/);

# Read ID3 tags
my $tag = get_mp3tag($params{mp3});

# Decide which tags to use, command line takes precedence
my $title = $params{title} // $$tag{TITLE};
my $artist = $params{artist} // $$tag{ARTIST};

if (!$title) {
	die "MP3 file did not contain a title, and none was supplied with -t\n";
}

if (!$artist) {
	die "MP3 file did not contain an artist, and none was supplied with -a\n";
}

# Extract embedded cover art, if image not specified
my $coverart = &coverArt({ffmpeg=>$ffmpeg, mp3=>$params{mp3}});

# Decide which image to use
my $image = $params{'image'} // $coverart // undef;

# Generate background image
my $imagefile = &generateImage({image=>$image, title=>$title, artist=>$artist, composer=>$params{composer},});

# Render video
`$ffmpeg -hide_banner -loglevel panic -loop 1 -framerate 2 -i "$imagefile" -i "$params{mp3}" -c:v libx264 -preset medium -tune stillimage -crf 18 -c:a aac -shortest -pix_fmt yuv420p "$basename.mkv" -y`;

# Tidy up temp files
unlink $imagefile;
unlink $coverart if $coverart;
