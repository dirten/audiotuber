#!/usr/bin/env perl

use strict;
use warnings;

=head1 NAME

App::Audiotuber - app to convert MP3 audio files to videos

=head1 SYNOPSIS

    audiotuber [OPTIONS] MP3FILE ... [MP3FILE...]

=head1 DESCRIPTION

Audiotuber is an app to convert MP3 audio files to videos, so they can be uploaded to video sharing sites.

If the MP3 file contains ID3 tags with the track name and artist, they will be used as a caption in the video.
These fields can also be overridden with command line options.

If the MP3 file contains embedded cover art, it will be used a still image in the video. An image file can
also be provided with command line options. If no cover art is available, the video will be plain black with
the caption overlaid.

=head1 OPTIONS

=over

=item -i --image

Image file to be used as a still image in the video

=item -t --title

Track title to be displayed in the video

=item -a --artist

Track artist to be displayed in the video

=item -c --composer

Track composer to be displayed in the video

=item -f --ffmpeg

Path to ffmpeg binary. Only needs to be provided if ffmpeg is not in your system PATH

=back

=head1 BUGS/CAVEATS/etc

Report bugs in the L<Github issue tracker|https://github.com/djjudas21/audiotuber/issues>

=head1 AUTHOR

Jonathan Gazeley

=head1 SEE ALSO

=head1 COPYRIGHT and LICENSE

=cut

use Getopt::Long;
use File::Which;
use File::Basename;
use MP3::Info;
use App::AudioTuber qw(/./);

# Read in our command line options
my %params = ();
GetOptions ( \%params,
	"image|i=s",    # image file
	"title|t=s",    # track title
	"artist|a=s",   # artist
	"composer|c=s", # composer
	"ffmpeg|f=s",   # path to ffmpeg
) or die("Error in command line arguments\n");

# Grab list of MP3s after Getopt has parsed options
my @mp3s = @ARGV;

# Print usage if no MP3s passed in
if (scalar @mp3s == 0) {
	die "Must provide at least one MP3 file\n";
}

my $ffmpeg = $params{ffmpeg} // which('ffmpeg');
if (!defined($ffmpeg) || !-x $ffmpeg) {
	die "Could not find ffmpeg executable\n";
}

if ($params{image} && !-e $params{image}) {
	die "Image file $params{image} does not exist\n";
}

# Loop round all MP3 files
foreach my $mp3 (@mp3s) {

	if (!$mp3) {
		die "Must provide an MP3 file\n";
	}

	if (!-e $mp3) {
		die "MP3 file $mp3 does not exist\n";
	}

	if ($mp3 !~ m/\.mp3$/i) {
		die "MP3 file $mp3 is not a valid MP3 file\n";
	}

	print "Working on $mp3...\n";

	# Get filename without extension
	my $basename = fileparse($mp3, qr/\.[^.]*/);

	# Read ID3 tags
	my $tag = get_mp3tag($mp3);

	# Decide which tags to use, command line takes precedence
	my $title = $params{title} // $$tag{TITLE};
	my $artist = $params{artist} // $$tag{ARTIST};

	if (!$title) {
		die "MP3 file did not contain a title, and none was supplied with -t\n";
	}

	if (!$artist) {
		die "MP3 file did not contain an artist, and none was supplied with -a\n";
	}

	# Extract embedded cover art, if image not specified
	my $coverart = &coverArt({ffmpeg=>$ffmpeg, mp3=>$mp3});

	# Decide which image to use
	my $image = $params{'image'} // $coverart // undef;

	# Generate background image
	my $imagefile = &generateImage({image=>$image, title=>$title, artist=>$artist, composer=>$params{composer},});

	# Render video
	`$ffmpeg -hide_banner -loglevel panic -loop 1 -framerate 2 -i "$imagefile" -i "$mp3" -c:v libx264 -preset medium -tune stillimage -crf 18 -c:a aac -shortest -pix_fmt yuv420p "$basename.mkv" -y`;

	# Tidy up temp files
	unlink $imagefile;
	unlink $coverart if $coverart;
}
